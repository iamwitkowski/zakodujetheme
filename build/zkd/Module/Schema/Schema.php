<?php
/**
 * Module: Schema.org
 *
 * This module is responsible for displaying Schema.org structured data in the system.
 * Everything could be configured from Schema Settings Page.
 *
 * 
 */
namespace zkd\Module\Schema;

use function zkd\createClass;
use function zkd\zkd;

class Schema
{
  /**
   * Schema.org: Printer
   *
   * @var zkd\Module\Schema\Printer
   */
  public $printer;

  /**
   * Global schemas
   *
   * These are schemas which are available in the system.
   * Every new schema code should be created ss_code_{schema} field ID.
   *
   * @var array
   */
  private $globalSchemas = ['organisation'];

  /**
   * Allowed markup fields.
   * Used for displaying data generated by system.
   *
   * @var array
   */
  private $defaultMarkupFields = array('{website_name}', '{website_url}', '{website_logo}');

  /**
   * Markup data.
   *
   * @var array
   */
  private $defaultMarkup = array();

  /**
   * Constructor
   */
  public function __construct()
  {
    $this->printer = createClass('zkd\\Module\\Schema\\Printer');
  }

  /**
   * Returns Schema data from ptions page
   *
   * Function prepares schema code for displaying on page.
   * When schema is disabled function returns empty string.
   *
   * 
   * @return string
   */
  private function get(string $schemaName): string
  {
    $schema = '';
    if (!empty($schemaName) && get_field('ss_status_' . $schemaName, 'options')) {
      $schema = get_field('ss_code_' . $schemaName, 'options');
      if (!empty($schema)) {
        $schema = '<script type="application/ld+json">' . $this->getParsed($schema) . '</script>';
      }
    }
    return $schema;
  }

  /**
   * Parses data and adds markup values
   *
   * 
   * @return string
   */
  public function getParsed(string $schema): string
  {
    foreach ($this->defaultMarkupFields as $field) {
      if (isset($this->defaultMarkup[$field])) {
        $schema = str_replace($field, $this->defaultMarkup[$field], $schema);
      }
    }
    return $schema;
  }

  /**
   * Print all default schemas
   *
   * @action zkd_before_closing_body_tag
   * @action zkd_after_opening_body_tag
   *
   * 
   * @return void
   */
  public function print(): void
  {
    foreach ($this->globalSchemas as $schema) {
      $content = $this->get($schema);
      if (!empty($content)) {
        echo $content;
      }
    }
  }

  /**
   * Initializes markup array with data from DB
   *
   * @action wp
   *
   * 
   * @return void
   */
  public function initMarkup(): void
  {
    $this->defaultMarkup = array(
      '{website_name}' => get_bloginfo('name'),
      '{website_url}' => home_url(''),
      '{website_logo}' => get_field('s_logo', 'options')
    );
  }

  /**
   * Adds Schema to Page
   *
   * @action zkd_before_closing_body_tag
   *
   * 
   * @return void
   */
  public function addToPage(): void
  {
    $schema = '';
    if (is_singular()) {
      $schema .= zkd('schema')->printer->standard(get_field('ss_schema_code', get_the_id()));
      $schema .= zkd('schema')->printer->article();
    }
    echo apply_filters('zkd_content_schema', $schema);
  }
}
